<UserControl x:Class="CommonChecker.SchemeView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:CommonChecker"
             xmlns:converter="clr-namespace:CommonChecker.Converter"
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             xmlns:MaterialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             mc:Ignorable="d" Background="White"
             d:DesignHeight="450" d:DesignWidth="800">
    
    <UserControl.Resources>
        <ResourceDictionary>
            <sys:Byte x:Key="AddByte">1</sys:Byte>
            <sys:Byte x:Key="EditByte">2</sys:Byte>
            <sys:Byte x:Key="DeleteByte">3</sys:Byte>
            
            <SolidColorBrush x:Key="CountColor" Color="Blue"/>
            <SolidColorBrush x:Key="ButtonColor" Color="OrangeRed" />

            <BooleanToVisibilityConverter x:Key="booleanToVisibilityConverter"/>
            <converter:NBooleanToVisibilityConverter x:Key="nBooleanToVisibilityConverter"/>
            <converter:OperationTypeToInfoStringConverter x:Key="operationTypeToInfoStringConverter" />
            <converter:OperationTypeToColorConverter x:Key="operationTypeToColorConverter"/>
            <converter:NodeToVisibilityConverter x:Key="nodeToVisibilityConverter" />
            <converter:ConditionTypeToStringConverter x:Key="conditionTypeToStringConverter"/>
            <converter:AllOperationToVisibilityConverter x:Key="alOperationToVisibilityConverter" />
            <converter:DataSourcesToVisibilityConverter x:Key="dataSourcesToVisibilityConverter" />
            <converter:ReverseVisibilityConverter x:Key="reverseVisibilityConverter"/>
            <converter:OperationEnumToVisibilityConverter x:Key="operationEnumToVisibilityConverter" />
            <converter:BooleanToStringConverter x:Key="booleanToStringConverter"/>

            <Style TargetType="{x:Type Button}" BasedOn="{StaticResource MaterialDesignRaisedButton}">
                <Setter Property="Foreground" Value="White"/>
                <Setter Property="Background" Value="{StaticResource ButtonColor}" />
            </Style>

            <Style x:Key="SecondButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource MaterialDesignRaisedButton}">
                <Setter Property="Background" Value="{DynamicResource PrimaryHueLightBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueLightBrush}"/>
                <Setter Property="Foreground" Value="White"/>
                <Setter Property="MaterialDesign:ButtonProgressAssist.IndicatorForeground" Value="{DynamicResource PrimaryHueDarkBrush}" />
            </Style>

            <ContextMenu x:Key="TypeCountMenu">
                <MenuItem Header="查看内容" Click="TypeCountMenuItem_Click" />
            </ContextMenu>

            <HierarchicalDataTemplate x:Key="NodeItem"  ItemsSource="{Binding ChildrenNode}">
                <MaterialDesign:Badged BadgeBackground="{Binding OperationType, Converter={StaticResource operationTypeToColorConverter}}" BadgeForeground="LightGray" Badge="{Binding OperationType, Converter={StaticResource operationTypeToInfoStringConverter}}">
                    <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center">
                    <Run Text="{Binding Name}" />
                    <Run Text="（"/>
                    <Run Text="{Binding Count}" Foreground="{StaticResource CountColor}" />
                    <Run Text="）"/>
                    </TextBlock>
                </MaterialDesign:Badged>
            </HierarchicalDataTemplate>

            <DataTemplate x:Key="SchemeItem" DataType="local:CNode">
                <MaterialDesign:Card Padding="10" VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                    <StackPanel>
                        <TextBlock VerticalAlignment="Top" HorizontalAlignment="Center" FontSize="14" Margin="10">
                            <Run Text="{Binding Name}"/>
                            <Run Text="文档"/>
                        </TextBlock>
                        <TreeView ItemTemplate="{StaticResource NodeItem}" ItemsSource="{Binding ChildrenNode}" SelectedItemChanged="TreeView_SelectedItemChanged" >
                            <TreeView.ItemContainerStyle>
                                <Style TargetType="TreeViewItem" BasedOn="{StaticResource MaterialDesignTreeViewItem}">
                                    <Setter Property="IsExpanded" Value="True"/>
                                    <Setter Property="Padding" Value="16, 10"/>
                                    <Setter Property="ContextMenu" Value="{StaticResource TypeCountMenu}" />
                                </Style>
                            </TreeView.ItemContainerStyle>
                        </TreeView>
                        <Button Margin="0,5" Content="导出" Command="{Binding DataContext.ExportCommand, RelativeSource={RelativeSource AncestorType=UserControl, AncestorLevel=1}}" CommandParameter="{Binding DataContext, RelativeSource={RelativeSource AncestorType=ListBoxItem, AncestorLevel=1}}" />
                    </StackPanel>
                </MaterialDesign:Card>
            </DataTemplate>

            <!--<DataTemplate x:Key="ChildItem" DataType="local:CNode">
                <TextBlock Text="{Binding Name}" MinWidth="80" />
            </DataTemplate>-->

            <DataTemplate x:Key="ConditionItem">
                <StackPanel x:Name="ItemPanel" Orientation="Vertical" Margin="10" >
                    <StackPanel Orientation="Horizontal" Width="{Binding ActualWidth, ElementName=ItemPanel}" >
                        <ComboBox Margin="5,0" HorizontalAlignment="Stretch" ItemsSource="{Binding DataContext.SelectedChildrenNode, RelativeSource={RelativeSource AncestorType=UserControl, AncestorLevel=1}}" DisplayMemberPath="Name" SelectedItem="{Binding Child}" SelectedIndex="0" />
                        <ComboBox SelectedItem="{Binding DeleteConditionString}" >
                            <sys:String>等于</sys:String>
                            <sys:String>小于</sys:String>
                            <sys:String>大于</sys:String>
                        </ComboBox>
                    </StackPanel>
                    <TextBox Width="{Binding ActualWidth, ElementName=ItemPanel}" Margin="5,0" Text="{Binding Value}" HorizontalAlignment="Stretch" MinWidth="100" />
                </StackPanel>
            </DataTemplate>
        </ResourceDictionary>
    </UserControl.Resources>
    
    <MaterialDesign:DrawerHost IsRightDrawerOpen="{Binding IsContentCountPanelShow}">
        <MaterialDesign:DrawerHost.RightDrawerContent>
            <Grid MinWidth="200">
                <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center" Visibility="{Binding ElementName=ContentCountListView, Path=Visibility, Converter={StaticResource reverseVisibilityConverter}}">
                    <ProgressBar IsIndeterminate="True" Style="{StaticResource MaterialDesignCircularProgressBar}" />
                    <TextBlock Margin="5" Text="正在搜索文件"/>
                </StackPanel>
                <ListView x:Name="ContentCountListView" ItemsSource="{Binding SpecifyNodeContentCountMap}" Visibility="{Binding SpecifyNodeContentCountMap, Converter={StaticResource dataSourcesToVisibilityConverter}}">
                    <ListView.View>
                        <GridView>
                            <GridViewColumn Header="类型" DisplayMemberBinding="{Binding Path=Key, Mode=OneWay}" />
                            <GridViewColumn Header="数量" DisplayMemberBinding="{Binding Path=Value, Mode=OneWay}" />
                        </GridView>
                    </ListView.View>
                </ListView>
            </Grid>
        </MaterialDesign:DrawerHost.RightDrawerContent>
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" MaxWidth="400"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <MaterialDesign:Card Margin="10, 20" MaterialDesign:ShadowAssist.ShadowDepth="Depth2" Padding="10" VerticalAlignment="Stretch" Width="250" MinWidth="150">
                <Grid>
                    <StackPanel Orientation="Vertical" Margin="0,5">
                        <TextBlock>
                        <Run Text="节点名称："/>
                        <Run Text="{Binding SelectedNode.Name}"/>
                        </TextBlock>
                        <StackPanel Orientation="Horizontal" Margin="0,5" Visibility="{Binding SelectedNode, Converter={StaticResource nodeToVisibilityConverter}}">
                            <Button Content="新增" Tag="1" Click="EditButton_Click" Margin="5,0" HorizontalAlignment="Left" Visibility="{Binding SelectedNode.HasChildren, Converter={StaticResource booleanToVisibilityConverter}}" />
                            <Button Content="修改" Tag="2" Click="EditButton_Click" Margin="5,0" HorizontalAlignment="Left" />
                            <Button Content="删除" Tag="3" Click="EditButton_Click" Margin="5,0" HorizontalAlignment="Right" />
                        </StackPanel>
                        <StackPanel x:Name="DeletePanel" Orientation="Vertical" Visibility="{Binding OperationType, Converter={StaticResource operationEnumToVisibilityConverter}, ConverterParameter={StaticResource DeleteByte}}">
                            <DockPanel>
                                <TextBlock Text="条件" DockPanel.Dock="Left" VerticalAlignment="Center" />
                                <Button DockPanel.Dock="Right" HorizontalAlignment="Right" Content="新增"  Command="{Binding AddDeleteConditionCommand}" />
                            </DockPanel>
                            <ListBox ItemsSource="{Binding SelectedNode.DeleteConditionCollection}" ItemTemplate="{StaticResource ConditionItem}" />
                        </StackPanel>
                        <StackPanel x:Name="EditPanel" Orientation="Vertical" Visibility="{Binding OperationType, Converter={StaticResource operationEnumToVisibilityConverter}, ConverterParameter={StaticResource EditByte}}">
                            <StackPanel Orientation="Horizontal">
                                <TextBlock x:Name="EditValue" Visibility="{Binding SelectedNode.IsEditNodeName, Converter={StaticResource nBooleanToVisibilityConverter}}" HorizontalAlignment="Left" Text="修改值为："  VerticalAlignment="Center"/>
                                <TextBlock x:Name="EditName" Visibility="{Binding SelectedNode.IsEditNodeName, Converter={StaticResource booleanToVisibilityConverter}}" HorizontalAlignment="Left" Text="修改名称为："  VerticalAlignment="Center"/>
                                <TextBox Visibility="{Binding Visibility, ElementName=EditValue}" HorizontalAlignment="Stretch" MinWidth="100" VerticalAlignment="Center" Margin="10,0" Text="{Binding SelectedNode.EditValue}"/>
                                <TextBox Visibility="{Binding Visibility, ElementName=EditName}" HorizontalAlignment="Stretch" MinWidth="100" VerticalAlignment="Center" Margin="10,0" Text="{Binding SelectedNode.EditName}"/>
                            </StackPanel>
                            <Button HorizontalAlignment="Right" x:Name="NameEditButton" Content="{Binding SelectedNode.IsEditNodeName, Converter={StaticResource booleanToStringConverter}}" Click="NameEditButton_Click" Margin="5" Style="{StaticResource SecondButtonStyle}" />
                        </StackPanel>
                        <StackPanel x:Name="AddPanel" Orientation="Vertical" Visibility="{Binding OperationType, Converter={StaticResource operationEnumToVisibilityConverter}, ConverterParameter={StaticResource AddByte}}">
                            <StackPanel Orientation="Horizontal">
                                <TextBlock HorizontalAlignment="Left" Text="名称：" VerticalAlignment="Center"/>
                                <TextBox HorizontalAlignment="Stretch" VerticalAlignment="Center" Margin="10,0" MinWidth="100" Text="{Binding SelectedNode.AddName}"/>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal">
                                <TextBlock HorizontalAlignment="Left" Text="内容：" VerticalAlignment="Center"/>
                                <TextBox HorizontalAlignment="Stretch" VerticalAlignment="Center" Margin="10,0" MinWidth="100" Text="{Binding SelectedNode.AddContent}"/>
                            </StackPanel>
                        </StackPanel>
                        <Button Content="清空改动" Style="{StaticResource SecondButtonStyle}" Command="{Binding ClearEditCommand}" HorizontalAlignment="Right" Margin="10, 5" Visibility="{Binding OperationType, Converter={StaticResource alOperationToVisibilityConverter}}"/>
                    </StackPanel>
                </Grid>
            </MaterialDesign:Card>
            <ScrollViewer Grid.Column="1">
                <ListBox x:Name="SchemeListBox" ItemTemplate="{StaticResource SchemeItem}" ItemsSource="{Binding RootNodeCollection}"
                        HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch">
                    <ListBox.ItemsPanel>
                        <ItemsPanelTemplate>
                            <WrapPanel Orientation="Horizontal"/>
                        </ItemsPanelTemplate>
                    </ListBox.ItemsPanel>
                    <ListBox.ItemContainerStyle>
                        <Style TargetType="ListBoxItem" BasedOn="{StaticResource MaterialDesignListBoxItem}">
                            <Setter Property="Margin" Value="15"/>
                        </Style>
                    </ListBox.ItemContainerStyle>
                </ListBox>
            </ScrollViewer>
        </Grid>
    </MaterialDesign:DrawerHost>
</UserControl>
